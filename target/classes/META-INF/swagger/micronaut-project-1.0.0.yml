openapi: 3.0.1
info:
  title: Micronaut project
  description: "{my.api.description}"
  license:
    name: MIT
  version: 1.0.0
paths:
  /admin/products:
    post:
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      responses:
        "201":
          description: createProduct 201 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
  /admin/products/{id}:
    put:
      operationId: updatedProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProduct"
        required: true
      responses:
        "200":
          description: updatedProduct 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
    delete:
      operationId: deleteProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: deleteProduct 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
  /auth/login:
    post:
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: login 200 response
          content:
            application/json:
              schema:
                type: object
  /hello:
    get:
      operationId: helloWorld
      responses:
        "200":
          description: helloWorld 200 response
          content:
            application/json:
              schema:
                type: string
      security:
      - Authorization: []
  /products:
    get:
      operationId: getproducts
      responses:
        "200":
          description: getproducts 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
  /products/filter:
    get:
      operationId: getlistbyQuery
      parameters:
      - name: max
        in: query
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: offset
        in: query
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: getlistbyQuery 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
  /products/type/{type}:
    get:
      operationId: getproductbyType
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getproductbyType 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
  /products/{id}:
    get:
      operationId: getproductbyid
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: getproductbyid 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
  /users:
    post:
      operationId: createUserAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserModel"
        required: true
      responses:
        "200":
          description: createUserAccount 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
      security:
      - Authorization: []
  /users/newaccount:
    post:
      operationId: addNewUserDetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUserModel"
        required: true
      responses:
        "200":
          description: addNewUserDetails 200 response
          content:
            application/json:
              schema:
                type: object
  /users/{id}:
    get:
      operationId: getUserDetails
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getUserDetails 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
      security:
      - Authorization: []
    delete:
      operationId: deleteUserDetails
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteUserDetails 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
      security:
      - Authorization: []
  /users/{id}/update:
    put:
      operationId: updateUserDetails
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDetail"
        required: true
      responses:
        "200":
          description: updateUserDetails 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDTO"
      security:
      - Authorization: []
components:
  schemas:
    LoginRequest:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    NewUserModel:
      required:
      - password
      - repeatPassword
      - userName
      type: object
      properties:
        userName:
          minLength: 1
          type: string
        password:
          maxLength: 16
          minLength: 8
          type: string
        repeatPassword:
          maxLength: 16
          minLength: 8
          type: string
    Product:
      required:
      - id
      - name
      - type
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        type:
          $ref: "#/components/schemas/Product.Type"
    Product.Type:
      type: string
      enum:
      - COFFEE
      - TEA
      - OTHERS
    UpdateProduct:
      required:
      - name
      - type
      type: object
      properties:
        name:
          type: string
        type:
          $ref: "#/components/schemas/Product.Type"
    UpdateUserDetail:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    UserModel:
      required:
      - email
      - firstName
      - lastName
      type: object
      properties:
        firstName:
          maxLength: 10
          minLength: 3
          type: string
          example: John
          x-size-message: First name must not be blank
        lastName:
          maxLength: 10
          minLength: 3
          type: string
          example: Doe
        email:
          minLength: 1
          type: string
          format: email
          example: Johndoe123@gmail.com
    UserResponseDTO:
      required:
      - email
      - firstName
      - lastName
      - uid
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        uid:
          type: string
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT
